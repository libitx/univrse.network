import{c as n,o as a,g as s}from"./vendor.9944df43.js";const t={class:"markdown-body"},e=s('<h1>Envelope spec</h1><h2>Introduction</h2><p>A Univrse Envelope is a structure for encoding any arbitrary data payload for data interchange and/or storage.</p><p>An Envelope consists of a set of headers and a data payload. Optionally one or more <a href="/docs/signature">Signature</a> structures may be used to protect data integrity with digital signature and MAC algorithms. And optionally, one or more <a href="/docs/recipient">Recipient</a> structures may be used to ensure confidentiality of the data payload using encryption algorithms.</p><h2>Structure</h2><p>A Univrse Envelope described using Concise Data Definition Language:</p><pre><code class="language-elixir">Envelope <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token attr-name">header:</span> Header<span class="token punctuation">,</span>\n  <span class="token attr-name">payload:</span> bytes<span class="token punctuation">,</span>\n  ? <span class="token attr-name">signature:</span> Signature <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token operator">+</span>Signature<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  ? <span class="token attr-name">recipient:</span> Recipient <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token operator">+</span>Recipient<span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n\nHeader <span class="token operator">=</span> <span class="token punctuation">{</span>\n  ? <span class="token attr-name">crit:</span> <span class="token punctuation">[</span><span class="token operator">+</span>text<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  ? <span class="token attr-name">cty:</span> text<span class="token punctuation">,</span>\n  ? <span class="token attr-name">proto:</span> text <span class="token operator">/</span> bytes<span class="token punctuation">,</span>\n  ? <span class="token attr-name">zip:</span> text<span class="token punctuation">,</span>\n  <span class="token operator">*</span> text <span class="token operator">=&gt;</span> any\n<span class="token punctuation">}</span>\n</code></pre><h2>Headers</h2><p>A Univrse Envelope may contain any of the following headers. It may also contain any other arbitrary key-value headers.</p><table><thead><tr><th>Header</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>crit</code></td><td>Critical headers</td><td></td></tr><tr><td><code>cty</code></td><td>Content type</td><td></td></tr><tr><td><code>proto</code></td><td>Protocol identifier</td><td></td></tr><tr><td><code>zip</code></td><td>Compression algorithm</td><td></td></tr></tbody></table><h2>Serialisation</h2><p>A Univrse Envelope can be serialised into several formats appropriate for data interchange or storage.</p><ul><li>CBOR encoding</li><li>String encoding</li><li>Bitcoin script</li></ul><h3>CBOR encoding</h3><p>The most concise serialisation option, serialises the entire Envelope structure to a single CBOR-encoded binary, as specified by the CDDL schema above.</p><h3>String encoding</h3><p>String encoding is useful for storing the Univrse Envelope in a text-based store such as browser local storage.</p><p>String encoding takes each part of the envelope (header, payload, signature, recipient), then in turn CBOR then Base64-url encodes each part, before concatenating it back together in the same order, delimited by the <code>.</code> character.</p><h3>Bitcoin script</h3><p>A Universe Envelope can be encoded within a Bitcoin script using the following conventions:</p><ul><li>The script must return with <code>OP_RETURN</code>.</li><li>The next push data must be the 4 bytes making up the UTF-8 text, <code>&quot;UNIV&quot;</code>.</li><li>The following 2 to 4 push datas must be the Envelope header, payload, signature and recipient parts, each CBOR-encoded.</li></ul><h3>Example</h3><pre><code class="language-javascript"><span class="token comment">// Create and sign envelope</span>\n<span class="token keyword">const</span> env <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cty<span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ES256K&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;1addr&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// CBOR encoding</span>\nenv<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &lt;Buffer 83 a1 63 63 74 79 6a 74 65 78 74 2f 70 6c 61 69 6e 6c 48 65</span>\n<span class="token comment">//            6c 6c 6f 20 77 6f 72 6c 64 21 82 a2 63 61 6c 67 66 45 53 32</span>\n<span class="token comment">//            35 36 4b 63 6b 69 64 65 31 61 ... 70 more bytes&gt;</span>\n\n<span class="token comment">// String encoding</span>\nenv<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; oWNjdHlqdGV4dC9wbGFpbg.bEhlbGxvIHdvcmxkIQ.gqJjYWxnZkVTMjU2S2NraWRlM</span>\n<span class="token comment">//    WFkZHJYQSAa-R5YjKeElqIiFWsM-goxAD2BaOu81ZSUiSh0VUKetUlw9FqPo27kpCBL</span>\n<span class="token comment">//    810AtsRogK_ANNTweK3g7E-L7JDU</span>\n\n<span class="token comment">// Bitcoin script</span>\nenv<span class="token punctuation">.</span><span class="token function">toScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAsmString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// =&gt; 0 OP_RETURN 554e4956 a1636374796a746578742f706c61696e</span>\n<span class="token comment">//    6c48656c6c6f20776f726c6421</span>\n<span class="token comment">//    82a263616c676645533235364b636b696465316164647258411fb39ba74d4b96f40c6e1c082ff0fdd0388476b955fb818cac56d0377036e445dc5de5f298f786d33213adb33cf6ffe61f3a89d7464aed4de9c1e28d9d8a12334e</span>\n</code></pre>',23),o={expose:[],setup:s=>(s,o)=>(a(),n("div",t,[e]))};export default o;
