import{c as n,o as s,g as a}from"./vendor.9944df43.js";const p={class:"markdown-body"},t=a('<h1>JavaScript library</h1><p>The JavaScript library, <code>univrse.js</code> can be used for working with Univrse in browser and Node.js environments.</p><ul><li><a href="https://github.com/libitx/univrse-js">univrse.js source code</a></li><li><a href="https://libitx.github.io/univrse-js/">univrse.js API docs</a></li></ul><h2>Installation</h2><p>Install Univrse with npm or yarn:</p><pre><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> univrse\n<span class="token comment"># or</span>\n<span class="token function">yarn</span> <span class="token function">add</span> univrse\n</code></pre><p>Alternatively use in a browser via CDN:</p><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//unpkg.com/univrse/dist/univrse.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><p>Univrse has a peer dependency on version 2 the bsv library which must also be installed in your project.</p><h2>Usage</h2><h3>Serialising data</h3><p>Any arbitrary payload can be wrapped in an <code>Envelope</code> structure, and then encoded in one of three serialisation formats:</p><ul><li><code>Envelope#toBuffer()</code> - Concise CBOR-encoded binary value</li><li><code>Envelope#toString()</code> - Compact Base64-url encoded string value</li><li><code>Envelope#toScript()</code> - Encoded in a Bitcoin <code>OP_RETURN</code> script</li></ul><pre><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;univrse&#39;</span>\n\n<span class="token comment">// Wrap any arbitrary data payload in an Envelope structure</span>\n<span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token string">&#39;Hello world!&#39;</span>\n<span class="token keyword">const</span> env1 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token punctuation">{</span> proto<span class="token operator">:</span> <span class="token string">&#39;univrse.demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Encode the data in one of three serialisation formats</span>\n<span class="token keyword">const</span> envBuffer <span class="token operator">=</span> env1<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> envString <span class="token operator">=</span> env1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> envScript <span class="token operator">=</span> env1<span class="token punctuation">.</span><span class="token function">toScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Decode the serialised data back into an Envelope structure</span>\n<span class="token keyword">const</span> env2 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">fromBuffer</span><span class="token punctuation">(</span>envBuffer<span class="token punctuation">)</span>\n<span class="token keyword">const</span> env3 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>envString<span class="token punctuation">)</span>\n<span class="token keyword">const</span> env4 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">fromScript</span><span class="token punctuation">(</span>envScript<span class="token punctuation">)</span>\n\n<span class="token comment">// Compare payload</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env2<span class="token punctuation">.</span>payload <span class="token operator">===</span> payload<span class="token punctuation">,</span> env3<span class="token punctuation">.</span>payload <span class="token operator">===</span> payload<span class="token punctuation">,</span> env4<span class="token punctuation">.</span>payload <span class="token operator">===</span> payload<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; true, true, true</span>\n</code></pre><h3>Using signatures</h3><p>Digital signatures or message authentication code (MAC) algorithms can be used to protect the integrity of an Envelopeâ€™s data payload.</p><pre><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelope<span class="token punctuation">,</span> Key <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;univrse&#39;</span>\n\n<span class="token comment">// Generate keys</span>\n<span class="token keyword">const</span> aliceKey <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;ec&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;secp256k1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> alicePubKey <span class="token operator">=</span> aliceKey<span class="token punctuation">.</span><span class="token function">toPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> appSecret <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;oct&#39;</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Sign and verify using a single key</span>\n<span class="token keyword">const</span> env1 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> proto<span class="token operator">:</span> <span class="token string">&#39;univrse.demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env1<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>aliceKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ES256K&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> env1<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>alicePub<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; true</span>\n\n<span class="token comment">// Sign and verify using multiple keys and algorithms</span>\n<span class="token keyword">const</span> env2 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> proto<span class="token operator">:</span> <span class="token string">&#39;univrse.demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env2<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span>aliceKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ES256K&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>appSecret<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;HS256&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;app&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> env2<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">[</span>alicePub<span class="token punctuation">,</span> appSecret<span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; true</span>\n</code></pre><h3>Using encryption</h3><p>Authenticated encryption algorithms may be used to ensure the confidentiality of an Envelopeâ€™s data payload for one or multiple recipients.</p><pre><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelope<span class="token punctuation">,</span> Key <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;univrse&#39;</span>\n\n<span class="token comment">// Generate keys</span>\n<span class="token keyword">const</span> bobKey <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;ec&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;secp256k1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> bobPubKey <span class="token operator">=</span> bobKey<span class="token punctuation">.</span><span class="token function">toPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> charlieKey <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;ec&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;secp256k1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> charliePubKey <span class="token operator">=</span> bobKey<span class="token punctuation">.</span><span class="token function">toPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> appSecret <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;oct&#39;</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Encrypt and decrypt data for a single recipient</span>\n<span class="token keyword">const</span> env1 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> proto<span class="token operator">:</span> <span class="token string">&#39;univrse.demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env1<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>bobPubKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ECDH-ES+A128GCM&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env1<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>bobKey<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env1<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &quot;Hello world!&quot;</span>\n\n<span class="token comment">// Encrypt and decrypt data for multiple recipients using multiple algorithms</span>\n<span class="token keyword">const</span> env2 <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> proto<span class="token operator">:</span> <span class="token string">&#39;univrse.demo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> env2<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span>appSecret<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;A256GCM&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>bobPubKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ECDH-ES+A128GCM&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>bobPubKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> alg<span class="token operator">:</span> <span class="token string">&#39;ECIES-BIE1&#39;</span><span class="token punctuation">,</span> kid<span class="token operator">:</span> <span class="token string">&#39;charlie&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> bobEnv <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">fromBuffer</span><span class="token punctuation">(</span>env2<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> bobEnv<span class="token punctuation">.</span><span class="token function">decryptAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bobKey<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bobEnv<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &quot;Hello world!&quot;</span>\n\n<span class="token keyword">const</span> charlieEnv <span class="token operator">=</span> Envelope<span class="token punctuation">.</span><span class="token function">fromBuffer</span><span class="token punctuation">(</span>env2<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> charlieEnv<span class="token punctuation">.</span><span class="token function">decryptAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> charlieKey<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>charlieEnv<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n<span class="token comment">// =&gt; &quot;Hello world!&quot;</span>\n</code></pre><h3>Working with <code>bsv</code> keys</h3><p>The <code>util</code> module provides a number of helper functions to convert to and from <code>bsv</code> keys.</p><pre><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> KeyPair <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bsv&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Key<span class="token punctuation">,</span> util <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;univrse&#39;</span>\n\n<span class="token comment">// Convert bsv KeyPair to Univrse keys</span>\n<span class="token keyword">const</span> keyPair <span class="token operator">=</span> KeyPair<span class="token punctuation">.</span><span class="token function">fromRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> keyFromPrivKey <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">fromBsvPrivKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>privKey<span class="token punctuation">)</span>\n<span class="token keyword">const</span> keyFromPubKey <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">fromBsvPubKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>pubKey<span class="token punctuation">)</span>\n\n<span class="token comment">// Convert Univrse key to bsv keys</span>\n<span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">await</span> Key<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&#39;ec&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;secp256k1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> privKey <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">toBsvPrivKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n<span class="token keyword">const</span> pubKey <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">toBsvPubKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre>',23),o={expose:[],setup:a=>(a,o)=>(s(),n("div",p,[t]))};export default o;
